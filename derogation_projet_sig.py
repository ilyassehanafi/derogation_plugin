# -*- coding: utf-8 -*-
"""
/***************************************************************************
 derogation
                                 A QGIS plugin
 projet_sig_derogation
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-06-19
        git sha              : $Format:%H$
        copyright            : (C) 2021 by GEOINFORMATION_BINOME_HANAFI_MOUSSA
        email                : ilyassehanafi@gmail.com-aymanemoussa0@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis._core import QgsFields, QgsField, QgsVectorFileWriter, QgsWkbTypes, QgsCoordinateReferenceSystem, QgsFeature, \
    QgsGeometry, QgsPointXY, QgsProject, QgsVectorLayer
from qgis.utils import iface

from .derogation_projet_sig_dialog import derogationDialog
import os.path
from os import listdir
from os.path import join


class derogation:
    """QGIS Plugin Implementation."""
    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'derogation_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&MINI_PROJET_DEROGATION')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('derogation', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/derogation_projet_sig/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
    def get_cord(self):
        # create fields
        layerFields = QgsFields()
        layerFields.append(QgsField('ID', QVariant.Int))
        layerFields.append(QgsField('X', QVariant.Double))
        layerFields.append(QgsField('Y', QVariant.Double))
        #define the file path for the new shapefile and creat it
        self.random += 1
        onlyfiles = [f for f in listdir(r'C:\Users\ilyasse2.0\Desktop\points_derogation') if
                     os.path.isfile(join(r'C:\Users\ilyasse2.0\Desktop\points_derogation', f))]
        fn1 = 'points' + str(self.random) + '.shp'
        a = 0
        i = 0
        while a < len(onlyfiles):
            if (onlyfiles[i] == fn1):
                self.random += 1
                fn1 = 'points' + str(self.random) + '.shp'
            a += 1
            i += 1

        fn = 'C:/Users/ilyasse2.0/Desktop/points_derogation/points'+str(self.random)+'.shp'
        writer = QgsVectorFileWriter(fn, 'UTF-8', layerFields, QgsWkbTypes.Point,
                                     QgsCoordinateReferenceSystem('EPSG:26191'), 'ESRI Shapefile')
        # First, create an empty QgsFeature().
        feat = QgsFeature()
        feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(float(str(eval(self.dlg.corX.text()))), float(str(eval(self.dlg.corY.text()))))))
        feat.setAttributes([3,float(str(eval(self.dlg.corX.text()))), float(str(eval(self.dlg.corY.text())))])
        writer.addFeature(feat)
        layer = iface.addVectorLayer(fn, '', 'ogr')
    def buffer(self):
        # Buffer
        layers = [layer for layer in QgsProject.instance().mapLayers().values()]
        for layer in layers:
            if(layer.name()=="points"):
                buffered_feat_list = []

                # looping through features of the active layer
                for id, feat in enumerate(layer.getFeatures()):
                    # original geometry
                    geometry = feat.geometry()

                    # random integer within the defined values
                    buffer_dist = float(str(eval(self.dlg.buffer_dis.text())))

                    # create the buffered geometry. The other integer is the number
                    # of segments
                    buffer = geometry.buffer(buffer_dist, 16)

                    # creating a new feature that shares the same id number but new geometry
                    feat = QgsFeature(id)
                    feat.setGeometry(buffer)

                    # adding all the features to a list
                    buffered_feat_list.append(feat)

                # making sure the CRS is the same in both layers
                layer_crs = layer.sourceCrs().toWkt()

                # creating the new vector layer as a temporary (memory) layer
                buff_layer = QgsVectorLayer('Polygon?crs=' + layer_crs, "Buffered " + layer.sourceName(),
                                            "memory")

                # adding all the features to it
                buff_layer.dataProvider().addFeatures(buffered_feat_list)

                # check the layer is valid
                if buff_layer.isValid():
                    # inserting the new layer to the project
                    QgsProject.instance().addMapLayer(buff_layer)
                else:
                    print("faulty layer")


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&MINI_PROJET_DEROGATION'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = derogationDialog()
        #button appliquer buffer
        self.random=0
        self.dlg.getPoint.clicked.connect(self.get_cord)
        self.dlg.appBuffer.clicked.connect(self.buffer)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            pass

